{"version":3,"sources":["assets/img/verified-logo.svg","assets/img/arrow-logo.svg","assets/img/comment_icon.svg","assets/img/repost_icon.svg","assets/img/like_icon.svg","assets/img/share_icon.svg","components/AddTweet/AddTweet.js","components/AddUsers/AddUser.js","components/Navbar/Navbar.js","components/Tweets/Tweet.js","components/Tweets/Tweets.js","components/Users/User.js","components/Users/Users.js","App.js","serviceWorker.js","store/reducers/tweetsReducer.js","store/reducers/usersReducer.js","store/store.js","index.js"],"names":["module","exports","connect","state","dispatch","createNewUser","userId","content","image","Axios","post","type","props","useState","setUserId","setContent","url","setUrl","changeHandler","e","target","id","value","className","onChange","usersPage","users","map","user","i","key","name","onClick","alert","nickname","username","avatar","setName","setNickname","length","Navbar","activeClassName","to","Tweet","author","postID","changeCommentsCount","changeRepostsCount","changeLikesCount","src","alt","verifiedIcon","Date","toLocaleDateString","arrowIcon","commentIcon","Math","floor","random","repostIcon","likeIcon","shareIcon","getTweets","get","tweets","data","getUsers","useEffect","tweetsPage","el","find","UserCard","styled","div","NameWrapper","AvatarWrapper","Img","img","InfoWrapper","NicknameWrapper","User","UsersList","App","path","exact","component","Users","AddUser","Tweets","AddTweet","Boolean","window","location","hostname","match","initialState","reducers","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","getState","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.159fe98b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/verified-logo.2019cadf.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow-logo.1cd146fe.svg\";","module.exports = __webpack_public_path__ + \"static/media/comment_icon.6344ee7b.svg\";","module.exports = __webpack_public_path__ + \"static/media/repost_icon.a9a99fc3.svg\";","module.exports = __webpack_public_path__ + \"static/media/like_icon.57c9a039.svg\";","module.exports = __webpack_public_path__ + \"static/media/share_icon.8e82847c.svg\";","import Axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./addTweet.css\";\n\nconst AddTweet = (props) => {\n  const [userId, setUserId] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [url, setUrl] = useState(\"\");\n\n  const changeHandler = (e) => {\n    if (e.target.id === \"userIdInput\") {\n      setUserId(+e.target.value);\n    } else if (e.target.id === \"contentInput\") {\n      setContent(e.target.value);\n    } else if (e.target.id === \"urlInput\") {\n      setUrl(e.target.value);\n    }\n  };\n\n  const createNewTweetFunc = () => {\n    if (userId && url && content) {\n      props.createNewUser(userId, content, url);\n      setUserId(props.usersPage.users[0].id);\n      setContent(\"\");\n      setUrl(\"\");\n      alert(\"Added successfully\");\n    }\n  };\n\n  return (\n    <div className=\"add-tweet-container\">\n      <div className=\"form-wrapper\">\n        <label>\n          <span>User ID</span>\n          <select\n            type=\"text\"\n            id=\"userIdInput\"\n            value={userId}\n            onChange={changeHandler}\n          >\n            {props.usersPage.users?.map((user, i) => (\n              <option value={user.id} key={i}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n        <label>\n          <span>Content</span>\n          <textarea\n            type=\"text\"\n            id=\"contentInput\"\n            value={content}\n            onChange={changeHandler}\n          ></textarea>\n        </label>\n        <label>\n          <span>Image URL</span>\n          <input\n            type=\"text\"\n            id=\"urlInput\"\n            value={url}\n            onChange={changeHandler}\n          />\n        </label>\n        <button onClick={createNewTweetFunc}>ADD TWEET</button>\n      </div>\n    </div>\n  );\n};\n\nconst mapState = (state) => {\n  return state;\n};\n\nconst mapDispatch = (dispatch) => ({\n  createNewUser(userId, content, image) {\n    Axios.post(\"http://domer.tech:9999/tweets/\", {\n      userId,\n      content,\n      image,\n    });\n    dispatch({\n      type: \"CREATE_NEW_USER\",\n    });\n  },\n});\n\nexport default connect(mapState, mapDispatch)(AddTweet);\n","import Axios from \"axios\";\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./addUser.css\";\n\nconst AddUser = (props) => {\n  const [name, setName] = useState(\"\");\n  const [nickname, setNickname] = useState(\"\");\n  const [url, setUrl] = useState(\"\");\n\n  const changeHandler = (e) => {\n    if (e.target.id === \"nameInput\") {\n      setName(e.target.value);\n    } else if (e.target.id === \"nicknameInput\") {\n      setNickname(e.target.value);\n    } else if (e.target.id === \"urlInput\") {\n      setUrl(e.target.value);\n    }\n  };\n\n  const createNewUserFunc = () => {\n    if (name && url && nickname.length > 1) {\n      props.createNewUser(name, nickname, url);\n      setName(\"\");\n      setNickname(\"\");\n      setUrl(\"\");\n      alert(\"Added successfully\");\n    }\n  };\n\n  return (\n    <div className=\"add-user-container\">\n      <div className=\"form-wrapper\">\n        <label>\n          <span>Name</span>\n          <input\n            type=\"text\"\n            id=\"nameInput\"\n            value={name}\n            onChange={changeHandler}\n          />\n        </label>\n        <label>\n          <span>Nickname</span>\n          <input\n            type=\"text\"\n            id=\"nicknameInput\"\n            value={nickname}\n            onChange={changeHandler}\n          />\n        </label>\n        <label>\n          <span>Image URL</span>\n          <input\n            type=\"text\"\n            id=\"urlInput\"\n            value={url}\n            onChange={changeHandler}\n          />\n        </label>\n        <button onClick={createNewUserFunc}>ADD USER</button>\n      </div>\n    </div>\n  );\n};\n\nconst mapDispatch = (dispatch) => ({\n  createNewUser(name, nickname, url) {\n    Axios.post(\"http://domer.tech:9999/users/\", {\n      name: name,\n      username: `@${nickname}`,\n      avatar: url,\n    });\n    dispatch({\n      type: \"CREATE_NEW_USER\",\n    });\n  },\n});\n\nexport default connect(null, mapDispatch)(AddUser);\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport './Navbar.css'\n\nconst Navbar = () => {\n  return (\n    <div className=\"Navbar\">\n      <div className=\"link-wrapper\">\n        <NavLink activeClassName='active' to=\"/users\">Users</NavLink>\n      </div>\n      <div className=\"link-wrapper\">\n        <NavLink activeClassName='active'  to=\"/addUser\">Add user</NavLink>\n      </div>\n      <div className=\"link-wrapper\">\n        <NavLink activeClassName='active'  to=\"/tweets\">Tweets</NavLink>\n      </div>\n      <div className=\"link-wrapper\">\n        <NavLink activeClassName='active'  to=\"/addTweet\">Add tweet</NavLink>\n      </div>\n    </div>\n  );\n};\n\nexport default Navbar;","import React, { useState } from \"react\";\nimport verifiedIcon from \"../../assets/img/verified-logo.svg\";\nimport arrowIcon from \"../../assets/img/arrow-logo.svg\";\nimport commentIcon from \"../../assets/img/comment_icon.svg\";\nimport repostIcon from \"../../assets/img/repost_icon.svg\";\nimport likeIcon from \"../../assets/img/like_icon.svg\";\nimport shareIcon from \"../../assets/img/share_icon.svg\";\nimport './Tweets.css'\n\nfunction Tweet({\n  author,\n  post,\n  postID,\n  changeCommentsCount,\n  changeRepostsCount,\n  changeLikesCount,\n}) {\n  const [isCommentClicked, setIsCommentClicked] = useState(false);\n  const [isRepostClicked, setIsRepostClicked] = useState(false);\n  const [isLikeClicked, setIsLikeClicked] = useState(false);\n  const changeCommentsCountFunc = () => {\n    changeCommentsCount(postID, isCommentClicked);\n    setIsCommentClicked(!isCommentClicked);\n  };\n  const changeRepostsCountFunc = () => {\n    changeRepostsCount(postID, isRepostClicked);\n    setIsRepostClicked(!isRepostClicked);\n  };\n  const changeLikesCountFunc = () => {\n    changeLikesCount(postID, isLikeClicked);\n    setIsLikeClicked(!isLikeClicked);\n  };\n  return (\n    <div className=\"post\">\n      <div className=\"user-logo-block\">\n        <img src={author.avatar} alt=\"user_logo\" />\n      </div>\n      <div className=\"post-info-block\">\n        <div className=\"text-block\">\n          <div className=\"post-info\">\n            <h4>{author.name}</h4>\n            <img src={verifiedIcon} alt=\"verified_icon\" />\n            <span>{`${author.username} · ${new Date().toLocaleDateString()}`}</span>\n            <img src={arrowIcon} alt=\"arrow_icon\" className=\"arrow-icon\" />\n          </div>\n          <div className=\"post-content\">\n            <p>{post.content}</p>\n          </div>\n        </div>\n        <div className=\"content-img-block\">\n          <img src={post.image} alt=\"post_img\" />\n        </div>\n        <div className=\"actions-block\">\n          <div className=\"action\">\n            <img src={commentIcon} alt=\"action_icon\" />\n            <span>{Math.floor(Math.random()*1000)}</span>\n          </div>\n          <div className=\"action\">\n            <img src={repostIcon} alt=\"action_icon\" />\n            <span>{Math.floor(Math.random()*1000)}</span>\n          </div>\n          <div className=\"action\">\n            <img src={likeIcon} alt=\"action_icon\" />\n            <span>{Math.floor(Math.random()*1000)}</span>\n          </div>\n          <div className=\"action\">\n            <img src={shareIcon} alt=\"action_icon\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Tweet;\n","import Axios from \"axios\";\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport Tweet from \"./Tweet\";\nimport \"./Tweets.css\";\n\nconst mapState = (state) => {\n  return state;\n};\n\nconst mapDispatch = (dispatch) => ({\n  async getTweets() {\n    const tweets = await Axios.get(\"http://domer.tech:9999/tweets\");\n    dispatch({\n      type: \"UPDATE_TWEETS_LIST\",\n      tweets: tweets.data.data,\n    });\n  },\n  async getUsers() {\n    const users = await Axios.get(\"http://domer.tech:9999/users\");\n    dispatch({\n      type: \"UPDATE_USERS_LIST\",\n      users: users.data.data,\n    });\n  },\n});\n\nconst Tweets = (props) => {\n  useEffect(() => {\n    props.getTweets();\n    props.getUsers();\n  }, []);\n\n  return (\n    <div className=\"posts-page\">\n      <div>\n        {props.tweetsPage.tweets?.map(\n          (el, i) =>\n            props.usersPage.users && (\n              <Tweet\n                key={i}\n                post={el}\n                author={props.usersPage?.users?.find(\n                  (user) => user.id === el.userId\n                )}\n              />\n            )\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default connect(mapState, mapDispatch)(Tweets);\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst UserCard = styled.div`\n    width: 20%;\n    background: #FFCC6B;\n    display: flex;\n    padding: 15px;\n    box-sizing: border-box;\n    border: 1px solid grey;\n    border-radius: 10px;\n    margin: 15px;\n`;\n\nconst NameWrapper = styled.div`\n    color: #171717;\n`;\n\nconst AvatarWrapper = styled.div`\n    width: 70px;\n    height: 70px;\n    border-radius: 50%\n`;\nconst Img = styled.img`\n    width: 100%;\n    height: 100%;\n    border-radius: 50%;\n`\n\nconst InfoWrapper = styled.div`\n    display:flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin-left: 15px;\n`;\n\nconst NicknameWrapper = styled.div`\n    color: #3B3C3F;\n`;\n\nconst User = ({ name, nickname, avatar }) => {\n  return (\n    <UserCard>\n      <AvatarWrapper>\n        <Img src={avatar}/>\n      </AvatarWrapper>\n      <InfoWrapper>\n        <NameWrapper>{name}</NameWrapper>\n        <NicknameWrapper>{nickname}</NicknameWrapper>\n      </InfoWrapper>\n    </UserCard>\n  );\n};\n\nexport default User;\n","import Axios from \"axios\";\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nimport User from \"./User\";\n\nconst UsersList = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    width: 100%;\n    justify-content: center;\n`\n\nconst mapState = (state) => {\n  return state;\n};\n\nconst mapDispatch = (dispatch) => ({\n    async getUsers() {\n      const users = await Axios.get(\"http://domer.tech:9999/users\");\n      dispatch({\n        type: \"UPDATE_USERS_LIST\",\n        users: users.data.data,\n      });\n    },\n});\n\n\nconst Users = (props) => {\n  useEffect(() => {\n    props.getUsers();\n  }, []);\n\n  return (\n    <UsersList>\n      {props.usersPage.users?.map((el, i) => {\n        return <User key={i} name={el.name} nickname={el.username} avatar={el.avatar}/>;\n      })}\n    </UsersList>\n  );\n};\n\nexport default connect(mapState, mapDispatch)(Users);\n","import React from \"react\";\nimport { HashRouter, Redirect, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport AddTweet from \"./components/AddTweet/AddTweet\";\nimport AddUser from \"./components/AddUsers/AddUser\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Tweets from \"./components/Tweets/Tweets\";\nimport Users from \"./components/Users/Users\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <Posts /> */}\n      <HashRouter>\n        <Navbar />\n        <div className='content'>\n          <Route path=\"/\" exact>\n            <Redirect to=\"/users\" />\n          </Route>\n          <Route path=\"/users\" component={Users} />\n          <Route path=\"/addUser\" component={AddUser} />\n          <Route path=\"/tweets\" component={Tweets} />\n          <Route path=\"/addTweet\" component={AddTweet} />\n        </div>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = [];\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case \"UPDATE_TWEETS_LIST\": {\n      return {\n        ...state,\n        tweets: action.tweets\n      }\n    }\n    case 'CREATE_NEW_TWEET':{\n      return state\n    }\n    default:\n      return state;\n  }\n};\n\n","const initialState = [];\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case \"UPDATE_USERS_LIST\": {\n      return {\n        ...state,\n        users: action.users\n      };\n    }\n    case 'CREATE_NEW_USER':{\n      return state;\n    }\n    default:\n      return state;\n  }\n};\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport tweetsReducer from \"./reducers/tweetsReducer\";\nimport usersReducer from \"./reducers/usersReducer\";\n\nconst reducers = combineReducers({\n  tweetsPage: tweetsReducer,\n  usersPage: usersReducer,\n});\nconst store = createStore(\n  reducers,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nwindow.store = store.getState()\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}